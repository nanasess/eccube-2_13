name: Coverage
on:
  push:
    branches:
      - '*'
    tags:
      - '*'
    paths:
      - '**'
      - '!*.md'
  pull_request:
    paths:
      - '**'
      - '!*.md'
jobs:
  run-on-linux:
    name: Run on Linux
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        php: [ 7.4 ]
        db: [ pgsql ]
        include:
          - db: pgsql
            dbport: '5432'
            dbuser: 'postgres'
            dbpass: 'password'
            dbname: 'eccube_db'
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mailcatcher:
        image: schickling/mailcatcher
        ports:
          - 1080:1080
          - 1025:1025
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get Composer Cache Directory
      id: composer-cache
      run: |
        echo "::set-output name=dir::$(composer config cache-files-dir)"
    - uses: actions/cache@v1
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Setup PHP
      uses: nanasess/setup-php@master
      with:
        php-version: ${{ matrix.php }}

    - name: Install to Composer
      run: composer install --no-interaction -o

    - name: Setup to EC-CUBE
      env:
        DB: ${{ matrix.db }}
        USER: ${{ matrix.dbuser }}
        DBUSER: ${{ matrix.dbuser }}
        DBPASS: ${{ matrix.dbpass }}
        DBNAME: ${{ matrix.dbname }}
        DBPORT: ${{ matrix.dbport }}
        HTTP_URL: http://localhost:8085/
        HTTPS_URL: http://localhost:8085/
      run: |
        sudo apt-fast install -y mysql-client postgresql-client
        ./eccube_install.sh ${DB}

    - name: setup-chromedriver
      uses: nanasess/setup-chromedriver@master
      with:
        chromedriver-version: 2.43

    - name: Run to PHPUnit
      run: phpdbg -qrr data/vendor/bin/phpunit --exclude-group classloader --coverage-clover=coverage.xml
    - name: Upload coverage
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        # token: ${{ secrets.CODECOV_TOKEN }}
        flags: tests
        name: codecov-umbrella
        # yml: ./codecov.yml
        fail_ci_if_error: true
        verbose: true
